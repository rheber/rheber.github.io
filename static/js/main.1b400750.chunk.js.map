{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["customCommands","name","usage","summary","action","kernel","fetch","then","response","text","xs","fortunes","split","filter","f","length","printOut","Math","floor","random","visit","isPersonalCommand","command","includes","commands","forEach","padEnd","keybindings","keybinding","key","configuration","autoFocus","defaultConfiguration","startupMessage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAQMA,EAAiB,CACrB,CACEC,KAAM,UACNC,MAAO,UACPC,QAAS,0BACTC,OAAQ,SAACC,GACPC,MAAM,4BAA4BC,MAChC,SAAAC,GAAQ,OAAIA,EAASC,UACrBF,MAAK,SAAAE,GACL,IAdeC,EAcTC,EAAWF,EAAKG,MAAM,OAAOC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,OAAS,KAC1DV,EAAOW,UAfQN,EAeeC,GAdtBM,KAAKC,MAAMD,KAAKE,SAAWT,EAAGK,eAkB5C,CACEd,KAAM,SACNC,MAAO,SACPC,QAAS,2BACTC,OAAQ,SAACC,GACPA,EAAOe,MAAM,uBAGjB,CACEnB,KAAM,OACNC,MAAO,OACPC,QAAS,qBACTC,OAAQ,SAACC,GACP,IAAMgB,EAAoB,SAACC,GACzB,MAAO,CAAC,SAAU,WAAWC,SAASD,EAAQrB,OAKhDI,EAAOW,SAAS,iDAChBX,EAAOW,SAAS,MAChBX,EAAOW,SAAS,4CAChBX,EAAOW,SAAS,MAEhBX,EAAOW,SAAS,8CAChBX,EAAOW,SAAS,MAChBX,EAAOmB,WAAWX,OAAOQ,GAAmBI,SAAQ,SAAAH,GAClDjB,EAAOW,SAAS,UAAGM,EAAQpB,OAAQwB,OAVnB,IAUuCJ,EAAQnB,YAEjEE,EAAOW,SAAS,MAEhBX,EAAOW,SAAS,mBAChBX,EAAOW,SAAS,MAChBX,EAAOmB,WAAWX,QAAO,SAAAS,GAAO,OAAKD,EAAkBC,MAAUG,SAAQ,SAAAH,GACvEjB,EAAOW,SAAS,UAAGM,EAAQpB,OAAQwB,OAjBnB,IAiBuCJ,EAAQnB,YAEjEE,EAAOW,SAAS,MAEhBX,EAAOW,SAAS,gBAChBX,EAAOW,SAAS,MAChBX,EAAOsB,cAAcF,SAAQ,SAAAG,GAC3BvB,EAAOW,SAAS,eAAQY,EAAWC,KAAMH,OAxBzB,IAwB6CE,EAAWzB,cAI9E,CACEF,KAAM,UACNC,MAAO,UACPC,QAAS,yEACTC,OAAQ,SAACC,GACPA,EAAOe,MAAM,gCAgBbU,EAAgB,CACpBC,WAAW,EACXP,SAdY,sBACTQ,IAAqBR,SAASX,QAAO,SAAAS,GAAO,MAAqB,SAAjBA,EAAQrB,SACxDD,GAaH2B,YARe,sBACZK,IAAqBL,aAHA,IAWxBM,eAAgB,gEAWHC,MARf,WACE,OACE,cAAC,IAAD,eACMJ,KCtFKK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1b400750.chunk.js","sourcesContent":["import './terminal.css';\nimport { defaultConfiguration, Unixorn } from \"unixorn\";\n\nconst randomElement = (xs) => {\n  const index = Math.floor(Math.random() * xs.length);\n  return xs[index];\n};\n\nconst customCommands = [\n  {\n    name: \"fortune\",\n    usage: \"fortune\",\n    summary: \"Print a random message.\",\n    action: (kernel) => {\n      fetch('/text/fortunes/paradoxum').then(\n        response => response.text()\n      ).then(text => {\n        const fortunes = text.split('%\\n').filter(f => f.length > 0);\n        kernel.printOut(randomElement(fortunes));\n      });\n    },\n  },\n  {\n    name: \"github\",\n    usage: \"github\",\n    summary: \"Visit my github profile.\",\n    action: (kernel) => {\n      kernel.visit(\"github.com/rheber\");\n    },\n  },\n  {\n    name: \"help\",\n    usage: \"help\",\n    summary: \"Show this message.\",\n    action: (kernel) => {\n      const isPersonalCommand = (command) => {\n        return [\"github\", \"unixorn\"].includes(command.name);\n      };\n\n      const padAmount = 24;\n\n      kernel.printOut(\"This is the personal website of Robert Heber.\");\n      kernel.printOut('\\n');\n      kernel.printOut(\"My website is a shell because I am cool.\");\n      kernel.printOut('\\n');\n\n      kernel.printOut(\"Commands to get more information about me:\");\n      kernel.printOut('\\n');\n      kernel.commands().filter(isPersonalCommand).forEach(command => {\n        kernel.printOut(`${command.usage}`.padEnd(padAmount) + command.summary);\n      });\n      kernel.printOut('\\n');\n\n      kernel.printOut(\"Other commands:\");\n      kernel.printOut('\\n');\n      kernel.commands().filter(command => !isPersonalCommand(command)).forEach(command => {\n        kernel.printOut(`${command.usage}`.padEnd(padAmount) + command.summary);\n      });\n      kernel.printOut('\\n');\n\n      kernel.printOut('Keybindings:');\n      kernel.printOut('\\n');\n      kernel.keybindings().forEach(keybinding => {\n        kernel.printOut(`ctrl-${keybinding.key}`.padEnd(padAmount) + keybinding.summary);\n      });\n    },\n  },\n  {\n    name: \"unixorn\",\n    usage: \"unixorn\",\n    summary: \"Visit the main page of Unixorn, a library I built to create this site.\",\n    action: (kernel) => {\n      kernel.visit(\"github.com/rheber/unixorn\");\n    },\n  },\n];\nconst commands = [\n  ...defaultConfiguration.commands.filter(command => command.name !== \"help\"),\n  ...customCommands,\n];\n\nconst customKeybindings = [\n];\nconst keybindings = [\n  ...defaultConfiguration.keybindings,\n  ...customKeybindings,\n];\n\nconst configuration = {\n  autoFocus: true,\n  commands,\n  keybindings,\n  startupMessage: \"Rob's Shell version 1.0. Enter `help` for basic information.\",\n};\n\nfunction App() {\n  return (\n    <Unixorn\n      {...configuration}\n    />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}